---
description: 
globs: 
alwaysApply: true
---
---
description: Project structure guidelines for file locations, naming, and Convex+Clerk pattern.
alwaysApply: true
---

# Project Structure Guidelines

Follow these guidelines when creating new files to maintain consistent project organization.

## Directory Structure

```
├── app/                    # Next.js app router pages and API routes
│   ├── api/               # API routes
│   ├── _actions/          # Server actions (private)
│   ├── actions/           # Server actions (public)
│   ├── [route]/          # Route directories
│   │   ├── page.tsx      # Page component
│   │   ├── layout.tsx    # Layout component
│   │   └── components/   # Route-specific components
├── components/            # Shared UI components
│   ├── ui/               # Basic UI components
│   └── [feature]/        # Feature-specific components
├── convex/                # Convex schema, functions, and backend logic
├── lib/                   # Utility functions and services
│   ├── services/         # Business logic and data services (Convex client wrappers)
│   ├── validations/      # Form and data validation
│   ├── convex/           # Convex client configuration and utilities
│   └── config/           # Configuration files
├── types/                # TypeScript type definitions
└── public/              # Static assets

```

## File Location Guidelines

1. **Components**
   - Reusable UI components → `/components/ui/`
   - Feature-specific shared components → `/components/[feature]/`
   - Route-specific components → `/app/[route]/components/`

2. **Business Logic**
   - Convex backend logic → `/convex/`
   - Database services (Convex client wrappers) → `/lib/services/`
   - Utility functions → `/lib/utils.ts`
   - Type definitions → `/types/`
   - Form validation → `/lib/validations/`
   - Convex client config → `/lib/convex/`

3. **Server Actions**
   - Private actions → `/app/_actions/`
   - Public actions → `/app/actions/`

4. **API Routes**
   - All API routes → `/app/api/`

## Naming Conventions

1. **Files**
   - React components and Utilities: kebab-case (e.g., `auth-utils.ts`)
   - Pages: `page.tsx`
   - Layouts: `layout.tsx`
   - Server actions: kebab-case (e.g., `create-sponsor.ts`)
   - Convex functions: kebab-case (e.g., `record-visit.ts`)

2. **Directories**
   - Route directories: kebab-case
   - Component directories: kebab-case
   - Feature directories: kebab-case
   - Convex modules: kebab-case

## File Sizes

Prefer to keep files to 300 lines of code. Split larger components into separate imports.

## Examples

### Good: New Component Location
```typescript
// ✅ /components/ui/button.tsx
export function Button() { ... }

// ✅ /components/sponsors/sponsor-card.tsx
export function SponsorCard() { ... }

// ✅ /app/sponsors/[slug]/components/tier-selector.tsx
export function TierSelector() { ... }
```

### Good: New Service Location
```typescript
// ✅ /lib/services/visit-service.ts
export async function recordVisit(args) { ... }

// ✅ /lib/validations/sponsor-schema.ts
export const sponsorSchema = { ... }
```

### Good: New Server Action Location
```typescript
// ✅ /app/_actions/create-sponsor.ts
export async function createSponsor() { ... }
```

### Good: New Convex Function Location
```typescript
// ✅ /convex/visits.ts
export const recordVisit = mutation({ ... })
```

### Good: New Convex Client Config Location
```typescript
// ✅ /lib/convex/client.ts
import { ConvexClient } from "convex/browser";
export const convex = new ConvexClient(process.env.NEXT_PUBLIC_CONVEX_URL!);
```

## Convex + Clerk Access Control Pattern

When using Convex as your backend database and Clerk for authentication:

- **All access control and identity validation MUST be handled by Clerk in your Next.js server** (typically Server Actions (`/app/_actions/`) or API routes (`/app/api/`)).
- **Server-side code (Actions/API routes) MUST call Convex using the Convex Node client** (e.g., `convexNodeClient` from `[lib/convex/serverClient.ts](mdc:lib/convex/serverClient.ts)`) or **`fetchQuery`/`fetchAction` from `convex/nextjs`** for any protected/private data operations.
    - `fetchQuery` can ONLY call **public queries** (`api.*` defined with `query`).
    - `fetchAction` can ONLY call **public actions** (`api.*` defined with `action`).
    - **NEVER attempt to call `internal.*` functions directly from Server Actions/API Routes using `fetchQuery` or `fetchAction`.**
- **Server Actions/API Routes using `convexNodeClient` or `fetchAction`/`fetchQuery` should primarily call public Convex `query` or `mutation` or `action` functions** (defined with `@convex/_generated/server::query` or `@convex/_generated/server::mutation` or `@convex/_generated/server::action`).
    - **Avoid calling Convex `action` functions via `convexNodeClient` or `fetchAction` if those actions rely on `ctx.auth.getUserIdentity()`**. The user identity context is NOT available in these server-to-server calls, and `ctx.auth` will return `null`, likely causing authentication errors within the action.
- **Convex queries/mutations called from the server SHOULD NOT perform internal authentication checks using `ctx.auth.getUserIdentity()`**. Because the call originates from the server (`convexNodeClient`, `fetchQuery`, `fetchAction`), `ctx.auth` will not contain the user's identity. Instead, these functions MUST rely on arguments (like `userId`) passed *from* the already-authenticated server action for authorization checks (e.g., `doc.userId === args.userId`).
- **Accessing Internal Convex Logic from Server Actions:** If a Server Action needs to execute logic defined in an `internalQuery`, `internalMutation`, or `internalAction`, you MUST create a **public bridge action** (`api.*` defined with `action`) in Convex.
    - This public bridge action takes the necessary arguments from the Server Action.
    - Inside the bridge action's handler, use `ctx.runQuery`, `ctx.runMutation`, or `ctx.runAction` to call the corresponding `internal.*` function, passing the arguments.
    - The Server Action then calls this public bridge action using `fetchAction` (passing the Clerk token if applicable).
- **Direct calls from Server Components (`page.tsx`, `layout.tsx`) to Convex using `fetchQuery` or similar are NOT recommended for authenticated data**, as the auth context may not propagate correctly. Use Server Actions instead.
- **Client-side components MUST NOT call Convex functions directly** for any operation requiring authentication or accessing private/user-specific data. Instead, they should call Server Actions or API routes.
- For purely public, read-only data, client-side Convex calls (`useQuery`) are acceptable.

**Recommended Flow (Server Action Example):**

1.  **Client Component:** Triggers the Server Action.
2.  **Server Action (`/app/_actions/some-action.ts`):**
    a.  Uses `await auth()` from `@clerk/nextjs/server` to get `userId`.
    b.  Calls the relevant Convex **public** `query`, `mutation`, or **bridge action** using `fetchQuery` or `fetchAction` (passing `userId` and potentially Clerk token).
    c.  The called Convex function performs logic based on passed arguments (*without* using `ctx.auth`).
    d.  Returns result/error.
3.  **Client Component:** Receives result/error.

**Benefits:**

-   Single source of truth for authentication (Clerk on the Next.js server).
-   Clear separation: Server Actions handle auth, Convex functions handle data logic.
-   Avoids `ctx.auth` issues in server-to-server calls.
-   Provides a secure way to access internal Convex logic from the server.

**Example (Server Action calling Internal Query via Public Action Bridge):**

```typescript
// ---- convex/myInternalStuff.ts ----
import { internalQuery } from "./_generated/server";
import { v } from "convex/values";

// Internal function - NOT directly callable from Next.js server
export const getSensitiveDataInternal = internalQuery({
  args: { recordId: v.id("myTable"), userId: v.string() }, // Needs userId for authz
  handler: async (ctx, args) => {
    // No ctx.auth checks here!
    const record = await ctx.db.get(args.recordId);
    if (!record) { throw new Error("Not found"); }
    // Authorization check based on passed userId
    if (record.ownerId !== args.userId) { throw new Error("Forbidden"); }
    // ... return sensitive data ...
    return { sensitive: record.internalValue };
  }
});

// ---- convex/serverActions.ts ----
import { action } from "./_generated/server";
import { internal } from "./_generated/api";
import { v } from "convex/values";

// PUBLIC Bridge Action - callable from Next.js server
export const getSensitiveDataForServer = action({
    args: { recordId: v.id("myTable"), userId: v.string() }, // Takes necessary args
    handler: async (ctx, args) => {
        console.log(`[Public Action Bridge] Calling internal query for user ${args.userId}`);
        // Calls the internal query using ctx.runQuery
        const sensitiveData = await ctx.runQuery(
            internal.myInternalStuff.getSensitiveDataInternal,
            { recordId: args.recordId, userId: args.userId } // Pass args through
        );
        return sensitiveData;
    },
});

// ---- app/_actions/secure-data-action.ts ----
'use server';
import { auth } from "@clerk/nextjs/server";
import { fetchAction } from "convex/nextjs";
import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";

export async function getSecureData(recordId: Id<"myTable">) {
  const { userId } = await auth(); // 1. Authenticate on Next.js server
  if (!userId) { throw new Error("Unauthorized"); }

  const token = await auth().getToken({ template: "convex" }); // Get token if needed
  if (!token) { throw new Error("Could not get Convex token"); }

  console.log(`[Server Action] Calling PUBLIC bridge action for user ${userId}`);
  // 2. Call the PUBLIC bridge action via fetchAction
  const result = await fetchAction(
      api.serverActions.getSensitiveDataForServer, // Target the public action
      { recordId: recordId, userId: userId },     // Pass necessary arguments
      { token }                                    // Pass token
  );

  // 3. Return result (Convex bridge action handled calling internal logic)
  return result;
}

// ---- Client Component Usage ----
// 'use client';
// import { getSecureData } from '@/app/_actions/secure-data-action';
// async function handleClick() {
//   const data = await getSecureData(someId);
//   console.log(data.sensitive);
// }
```

**Anti-Pattern (Calling Internal Query from Server Action):**

```typescript
// ❌ DON'T DO THIS in app/_actions/some-action.ts
// import { fetchQuery } from "convex/nextjs";
// import { internal } from "@/convex/_generated/api";
// export async function getSecureDataBAD(recordId: Id<"myTable">) {
//   const { userId } = await auth();
//   if (!userId) { /*...*/ }
//   // ERROR: Cannot call internal function with fetchQuery
//   const result = await fetchQuery(internal.myInternalStuff.getSensitiveDataInternal, { recordId, userId });
//   return result;
// }
```
